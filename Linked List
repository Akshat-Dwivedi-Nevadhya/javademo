class Main{
    Node head;
    class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next = null;
        }
    }
    public void addLast(int data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;return;
        }
        newNode.next = null;
        Node temp = head;
        while (temp.next!=null)
            temp = temp.next;
        temp.next = newNode;
        return;
    }
    public void addFirst(int data){
        Node newNode = new Node(data);
        if(head==null){
            head = newNode;return;
        }
        newNode.next = head;
        head = newNode;
    }
    public void insertAfterAnyNode(int data,int d1){
        Node newNode = new Node(data);
        Node prev_Node = head;
        while(prev_Node.data!=d1)
            prev_Node = prev_Node.next;
        newNode.next = prev_Node.next;
        prev_Node.next = newNode;
    }
    public void deleteFirst(){
        head = head.next;
    }
    public void middle(){
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        System.out.println("Middle element is: "+slow.data);
    }
    public void reverse(){
        Node prevNode = head;
        Node currNode = head.next;
        while(currNode!=null){
            Node nextNode = currNode.next;
            currNode.next = prevNode;

            //update
            prevNode = currNode;
            currNode = nextNode;
        }
        head.next = null;
        head = prevNode;
    }
    public void display(){
        if(head==null) {
            System.out.println("List is empty.");return;
        }
        Node temp = head;
        while(temp!=null) {
            System.out.print(temp.data + "-> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
    public static void main(String[] args) {
        Main list = new Main();
       /* list.addLast(2);
        list.addLast(4);
        list.addLast(10);
        list.addLast(8);

        list.display();

        list.addLast(11);
        list.display();*/
       list.addFirst(2);
       list.addLast(4);
       list.addLast(8);
       list.addLast(10);
       list.addLast(19);
       list.display();

       list.middle();
    }
}
